<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Transactions</title>
  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" 
    rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" 
    crossorigin="anonymous"
  >
  <!-- DataTables core CSS -->
  <link 
    rel="stylesheet" 
    href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css"
  />
  <!-- Responsive extension CSS -->
  <link 
    rel="stylesheet" 
    href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.bootstrap5.min.css"
  />
  <!-- Bootstrap Icons -->
  <link 
    rel="stylesheet" 
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    crossorigin="anonymous"
  >
  <style>
    .amount {
      min-width: 120px;
      white-space: nowrap;
    }
    .description {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      cursor: pointer;
    }
    .description:hover {
        white-space: pre-line;
        max-width: none;
        position: absolute;
        background: white;
        border: 1px solid #ccc;
        padding: 5px;
        z-index: 100;
    }
    .full-view .container {
      width: 100% !important;
      max-width: 100% !important;
    }
    .full-view .table-responsive {
        overflow-x: visible;
    }
    .full-view #transactionsTable {
        width: 100% !important;
    }
  </style>
</head>

<body>
  <main class="container my-4">
    <h1 class="mb-4">Transactions</h1>

    {% if filter_info %}
      <p class="text-muted"><small>{{ filter_info }}</small></p>
    {% endif %}

    <div class="table-responsive">
      {% set headers = transactions[0].getDictionary().keys() | list if transactions|length > 0 else [] %}
      <table 
        id="transactionsTable" 
        class="table table-striped table-hover table-responsive nowrap" 
        style="width: 100%"
      >
        <thead class="table-dark">
          <tr>
            {% for header in headers %}
              <th data-priority="{{ loop.index }}">
                {% if header in icon_map %}
                  <i class="{{ icon_map[header]|safe }}"></i>
                {% endif %}
                {% if header != "currency" %}
                  {{ header.replace('_', ' ') | title }}
                {% endif %}
              </th>
            {% endfor %}
          </tr>
        </thead>
        <tfoot>
          <tr>
            {% for header in headers %}
              <!-- Footer cell with header text to be replaced by a filter input/dropdown -->
              <th>{{ header | title }}</th>
            {% endfor %}
          </tr>
        </tfoot>
        <tbody>
          {% for transaction_object in transactions %}
            {% set row_dict = transaction_object.getDictionary() %}
            <tr class="{% if row_dict.value is none %}table-warning{% endif %}">
              {% for header in headers %}
                {% set cell_value = row_dict[header] %}
                {% if header == "value" %}
                  <td class="amount">
                    {% if cell_value is not none %}
                      {% if cell_value < 0 %}
                        <div class="d-flex justify-content-between">
                          <span class="text-danger">
                            <i class="bi bi-arrow-down-circle-fill"></i>
                          </span>
                          <span class="text-danger">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% elif cell_value > 0 %}
                        <div class="d-flex justify-content-between">
                          <span class="text-success">
                            <i class="bi bi-arrow-up-circle-fill"></i>
                          </span>
                          <span class="text-success">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% else %}
                        <div class="d-flex justify-content-between">
                          <span class="text-dark">=</span>
                          <span class="text-dark">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% endif %}
                    {% else %}
                      <span class="text-danger">No Value defined!</span>
                    {% endif %}
                  </td>
                {% elif header == "source" %}
                  <td class="{{ header }}">
                    {% if cell_value %}
                      <a href="{{ cell_value }}">{{ cell_value }}</a>
                    {% else %}
                      <span class="text-danger">No Document</span>
                    {% endif %}
                  </td>
                {% else %}
                  <td class="{{ header }}">{{ cell_value }}</td>
                {% endif %}
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="mb-3">
      <button id="resetFilters" class="btn btn-secondary btn-sm">
        <i class="bi bi-arrow-clockwise me-1"></i>Reset Filters
      </button>
      <button id="toggleFullView" class="btn btn-primary btn-sm">
        <i class="bi bi-arrows-fullscreen me-1"></i>Toggle Full View
      </button>
    </div>
  </main>
  <footer class="text-center mt-4">
    <small>
      This project is licensed under the 
      <a href="https://opensource.org/licenses/MIT" target="_blank">MIT License</a> &mdash; 
      developed by 
      <a href="https://www.veen.world/" target="_blank">Kevin Veen-Birkenbach</a>. 
      View source on 
      <a href="https://github.com/kevinveenbirkenbach/financial-helper" target="_blank">GitHub</a>.
    </small>
  </footer>

  <!-- jQuery -->
  <script 
    src="https://code.jquery.com/jquery-3.6.0.min.js" 
    crossorigin="anonymous"
  ></script>
  <!-- DataTables core JS -->
  <script 
    src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"
  ></script>
  <script 
    src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"
  ></script>
  <!-- Responsive extension JS -->
  <script 
    src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"
  ></script>
  <script 
    src="https://cdn.datatables.net/responsive/2.4.1/js/responsive.bootstrap5.min.js"
  ></script>

  <script>
    $(document).ready(function () {
        console.log("Initializing script...");

        // ************************************************************
        // Function: applyTextShortening
        // Purpose: Truncate long text while keeping the full text available
        //          for search. On hover, the full text is shown with line breaks.
        // ************************************************************
        function applyTextShortening(selector, maxLength, cutFromEnd = false) {
            $(selector).each(function () {
                let element = $(this);
                let link = element.find("a");
                let originalText = (link.length > 0) ? link.text().trim() : element.text().trim();

                if (originalText.length > maxLength) {
                    let truncatedText = cutFromEnd 
                        ? "…" + originalText.slice(-maxLength) 
                        : originalText.substring(0, maxLength) + "…";
                    
                    // Store full text in data-search attribute for custom filtering
                    element.attr("data-search", originalText);
                    
                    if (link.length > 0) {
                        link.text(truncatedText);
                    } else {
                        element.html('<span class="truncated-text">' + truncatedText + '</span>');
                    }

                    // Helper to insert line breaks into the full text
                    function formatWithLineBreaks(text, length) {
                        return text.replace(new RegExp("(.{" + length + "})", "g"), "$1\n");
                    }

                    // On hover, expand the text; on mouse leave, show truncated text.
                    element.hover(
                        function () {
                            let expandedText = formatWithLineBreaks(originalText, maxLength);
                            if (link.length > 0) {
                                link.text(expandedText);
                            } else {
                                $(this).html('<span class="full-text">' + expandedText + '</span>');
                            }
                            $(this).css("white-space", "pre-line");
                        },
                        function () {
                            if (link.length > 0) {
                                link.text(truncatedText);
                            } else {
                                $(this).html('<span class="truncated-text">' + truncatedText + '</span>');
                            }
                            $(this).css("white-space", "nowrap");
                        }
                    );
                }
            });
        }

        // ************************************************************
        // Create filter input fields in table footer.
        // The footer cells initially contain the header text.
        // This script replaces that text with an input element.
        // ************************************************************
        $("#transactionsTable tfoot th").each(function () {
            var title = $(this).text();
            $(this).html('<input type="text" placeholder="Search ' + title + '" class="form-control form-control-sm" />');
        });

        // ************************************************************
        // Add a custom global search filter to search using the full text
        // stored in the data-search attribute.
        // This ensures that even truncated text is searchable.
        // ************************************************************
        if (!$.fn.dataTable.ext.search.globalFilterAdded) {
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                var searchInput = $("#transactionsTable_filter input").val().toLowerCase();
                var row = $("#transactionsTable tbody tr").eq(dataIndex);
                var match = false;
                row.find("td").each(function () {
                    var searchValue = $(this).attr("data-search") || $(this).text();
                    if (searchValue.toLowerCase().includes(searchInput)) {
                        match = true;
                        return false; // Break the loop when a match is found.
                    }
                });
                return match;
            });
            $.fn.dataTable.ext.search.globalFilterAdded = true;
        }

        // ************************************************************
        // Function: initializeDataTable
        // Purpose: Initialize (or reinitialize) the DataTable with full 
        //          configuration, including responsive and filtering options.
        // ************************************************************
        function initializeDataTable(isFullView) {
            console.log("Initializing DataTable, fullView:", isFullView);

            // Destroy any existing DataTable instance
            if ($.fn.DataTable.isDataTable("#transactionsTable")) {
                $("#transactionsTable").DataTable().destroy();
            }

            var table = $("#transactionsTable").DataTable({
                responsive: !isFullView,
                scrollX: isFullView,
                order: [[0, "desc"]], // Order by first column descending
                pageLength: 25,
                lengthMenu: [
                    [10, 25, 50, 100, 200, 500, 1000, 2000, 5000, -1],
                    [10, 25, 50, 100, 200, 500, 1000, 2000, 5000, "All"]
                ],
                // initComplete: Set up column filters (dropdown if few unique values, text input otherwise)
                initComplete: function () {
                    this.api().columns().every(function () {
                        var column = this;
                        var uniqueData = column.data().unique().sort().toArray();
                        if (uniqueData.length <= 12) {
                            // Use a select dropdown if there are few unique values.
                            var select = $("<select class='form-select form-select-sm'><option value=''>All</option></select>")
                                .appendTo($(column.footer()).empty())
                                .on("change", function () {
                                    var val = $.fn.dataTable.util.escapeRegex($(this).val());
                                    column.search(val ? "^" + val + "$" : "", true, false).draw();
                                });
                            $.each(uniqueData, function (i, d) {
                                select.append("<option value='" + d + "'>" + d + "</option>");
                            });
                        } else {
                            // For columns with many unique values, use a text input filter.
                            $("input", column.footer()).on("keyup change clear", function () {
                                if (column.search() !== this.value) {
                                    column.search(this.value).draw();
                                }
                            });
                        }
                    });
                }
            });

            // Global search: redraw the table when the search input changes.
            $("#transactionsTable_filter input").off("keyup change").on("keyup change", function () {
                table.draw();
            });

            return table;
        }

        // ************************************************************
        // Apply text shortening to specific columns.
        // ************************************************************
        applyTextShortening(".description", 36);
        applyTextShortening(".id", 8, true);
        applyTextShortening(".source", 20, true);

        // Initialize the DataTable.
        var table = initializeDataTable(false);

        // ************************************************************
        // Reset Filters button: Clear all column filters and the global search.
        // ************************************************************
        $("#resetFilters").on("click", function () {
            console.log("Resetting filters...");
            table.columns().search('').draw();
            $("#transactionsTable_filter input").val('');
            $("#transactionsTable tfoot input").val('');
            $("#transactionsTable tfoot select").val('');
        });

        // ************************************************************
        // Toggle Full View button: Toggle between full view and standard view.
        // Reinitialize the DataTable with the updated settings.
        // ************************************************************
        $("#toggleFullView").on("click", function () {
            $("body").toggleClass("full-view");
            var isFullView = $("body").hasClass("full-view");
            console.log("Toggling Full View:", isFullView);
            table = initializeDataTable(isFullView);
        });

        console.log("DataTable active:", $.fn.DataTable.isDataTable("#transactionsTable"));
    });
  </script>
</body>
</html>
