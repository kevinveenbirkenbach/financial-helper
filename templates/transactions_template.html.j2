<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Transactions</title>
  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" 
    rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" 
    crossorigin="anonymous"
  >
  <!-- DataTables core CSS -->
  <link 
    rel="stylesheet" 
    href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css"
  />
  <!-- Responsive extension CSS -->
  <link 
    rel="stylesheet" 
    href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.bootstrap5.min.css"
  />
  <!-- Bootstrap Icons -->
  <link 
    rel="stylesheet" 
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    crossorigin="anonymous"
  >
  <style>
    .amount {
      min-width: 120px;
      white-space: nowrap;
    }
    /* Styles for truncated text cells */
    .description {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      cursor: pointer;
    }
    .description:hover {
      white-space: pre-line;
      max-width: none;
      position: absolute;
      background: white;
      border: 1px solid #ccc;
      padding: 5px;
      z-index: 100;
    }
    .full-view .container {
      width: 100% !important;
      max-width: 100% !important;
    }
    .full-view .table-responsive {
      overflow-x: visible;
    }
    .full-view #transactionsTable {
      width: 100% !important;
    }
  </style>
</head>

<body>
  <main class="container my-4">
    <h1 class="mb-4">Transactions</h1>

    {% if filter_info %}
      <p class="text-muted"><small>{{ filter_info }}</small></p>
    {% endif %}

    <div class="table-responsive">
      {% set headers = transactions[0].getDictionary().keys() | list if transactions|length > 0 else [] %}
      <table 
        id="transactionsTable" 
        class="table table-striped table-hover table-responsive nowrap" 
        style="width: 100%"
      >
        <thead class="table-dark">
          <tr>
            {% for header in headers %}
              <th data-priority="{{ loop.index }}">
                {% if header in icon_map %}
                  <i class="{{ icon_map[header]|safe }}"></i>
                {% endif %}
                {% if header != "currency" %}
                  {{ header.replace('_', ' ') | title }}
                {% endif %}
              </th>
            {% endfor %}
          </tr>
        </thead>
        <tfoot>
          <tr>
            {% for header in headers %}
              <!-- Footer cell will be replaced with a filter input -->
              <th>{{ header | title }}</th>
            {% endfor %}
          </tr>
        </tfoot>
        <tbody>
          {% for transaction_object in transactions %}
            {% set row_dict = transaction_object.getDictionary() %}
            <tr class="{% if row_dict.value is none %}table-warning{% endif %}">
              {% for header in headers %}
                {% set cell_value = row_dict[header] %}
                {% if header == "value" %}
                  <td class="amount">
                    {% if cell_value is not none %}
                      {% if cell_value < 0 %}
                        <div class="d-flex justify-content-between">
                          <span class="text-danger">
                            <i class="bi bi-arrow-down-circle-fill"></i>
                          </span>
                          <span class="text-danger">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% elif cell_value > 0 %}
                        <div class="d-flex justify-content-between">
                          <span class="text-success">
                            <i class="bi bi-arrow-up-circle-fill"></i>
                          </span>
                          <span class="text-success">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% else %}
                        <div class="d-flex justify-content-between">
                          <span class="text-dark">=</span>
                          <span class="text-dark">
                            {{ "%.2f"|format(cell_value) }}
                          </span>
                        </div>
                      {% endif %}
                    {% else %}
                      <span class="text-danger">No Value defined!</span>
                    {% endif %}
                  </td>
                {% elif header == "source" %}
                  <td class="{{ header }}">
                    {% if cell_value %}
                      <a href="{{ cell_value }}">{{ cell_value }}</a>
                    {% else %}
                      <span class="text-danger">No Document</span>
                    {% endif %}
                  </td>
                {% else %}
                  <!-- Add a class matching the header for potential text shortening -->
                  <td class="{{ header }}">{{ cell_value }}</td>
                {% endif %}
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="mb-3">
      <button id="resetFilters" class="btn btn-secondary btn-sm">
        <i class="bi bi-arrow-clockwise me-1"></i>Reset Filters
      </button>
      <button id="toggleFullView" class="btn btn-primary btn-sm">
        <i class="bi bi-arrows-fullscreen me-1"></i>Toggle Full View
      </button>
    </div>
  </main>
  <footer class="text-center mt-4">
    <small>
      This project is licensed under the 
      <a href="https://opensource.org/licenses/MIT" target="_blank">MIT License</a> &mdash; 
      developed by 
      <a href="https://www.veen.world/" target="_blank">Kevin Veen-Birkenbach</a>. 
      View source on 
      <a href="https://github.com/kevinveenbirkenbach/financial-helper" target="_blank">GitHub</a>.
    </small>
  </footer>

  <!-- jQuery -->
  <script 
    src="https://code.jquery.com/jquery-3.6.0.min.js" 
    crossorigin="anonymous"
  ></script>
  <!-- DataTables core JS -->
  <script 
    src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"
  ></script>
  <script 
    src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"
  ></script>
  <!-- Responsive extension JS -->
  <script 
    src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"
  ></script>
  <script 
    src="https://cdn.datatables.net/responsive/2.4.1/js/responsive.bootstrap5.min.js"
  ></script>

  <script>
    $(document).ready(function () {
      console.log("Initializing debugging script for clearing filters & text shortening...");

      // ************************************************************
      // Function: applyTextShortening
      // Purpose: Truncate long text while keeping the full text available
      //          for search. On hover, the full text is shown with line breaks.
      // ************************************************************
      function applyTextShortening(selector, maxLength, cutFromEnd = false) {
        $(selector).each(function () {
          let element = $(this);
          let link = element.find("a");
          let originalText = (link.length > 0) ? link.text().trim() : element.text().trim();
          console.log("applyTextShortening: Processing element", element, "Original text:", originalText);

          if (originalText.length > maxLength) {
            let truncatedText = cutFromEnd 
              ? "…" + originalText.slice(-maxLength) 
              : originalText.substring(0, maxLength) + "…";
            
            // Store full text in data-search attribute for filtering purposes.
            element.attr("data-search", originalText);
            
            if (link.length > 0) {
              link.text(truncatedText);
            } else {
              element.html('<span class="truncated-text">' + truncatedText + '</span>');
            }

            // Helper function to insert line breaks for the expanded view.
            function formatWithLineBreaks(text, length) {
              return text.replace(new RegExp("(.{" + length + "})", "g"), "$1\n");
            }

            element.hover(
              function () {
                let expandedText = formatWithLineBreaks(originalText, maxLength);
                if (link.length > 0) {
                  link.text(expandedText);
                } else {
                  $(this).html('<span class="full-text">' + expandedText + '</span>');
                }
                $(this).css("white-space", "pre-line");
              },
              function () {
                if (link.length > 0) {
                  link.text(truncatedText);
                } else {
                  $(this).html('<span class="truncated-text">' + truncatedText + '</span>');
                }
                $(this).css("white-space", "nowrap");
              }
            );
          }
        });
      }

      // Replace footer header text with input elements for column filtering.
      $("#transactionsTable tfoot th").each(function () {
        var title = $(this).text();
        $(this).html('<input type="text" placeholder="Search ' + title + '" class="form-control form-control-sm" />');
      });

      // Initialize the DataTable.
      function initializeDataTable(isFullView) {
        console.log("Initializing DataTable, fullView:", isFullView);

        // Destroy any existing DataTable instance.
        if ($.fn.DataTable.isDataTable("#transactionsTable")) {
          console.log("Destroying existing DataTable instance.");
          $("#transactionsTable").DataTable().destroy();
        }

        var table = $("#transactionsTable").DataTable({
          responsive: !isFullView,
          scrollX: isFullView,
          order: [[0, "desc"]],
          pageLength: 25,
          lengthMenu: [
            [10, 25, 50, 100, 200, 500, 1000, 2000, 5000, -1],
            [10, 25, 50, 100, 200, 500, 1000, 2000, 5000, "All"]
          ],
          // Set up column filtering.
          initComplete: function () {
            this.api().columns().every(function () {
              var column = this;
              var uniqueData = column.data().unique().sort().toArray();
              console.log("Column", column.index(), "initComplete. Unique data:", uniqueData);
              if (uniqueData.length <= 12) {
                var select = $("<select class='form-select form-select-sm'><option value=''>All</option></select>")
                  .appendTo($(column.footer()).empty())
                  .on("change", function () {
                    var val = $.fn.dataTable.util.escapeRegex($(this).val());
                    console.log("Dropdown change on column", column.index(), "New value:", val);
                    column.search(val ? "^" + val + "$" : "", true, false).draw();
                  });
                $.each(uniqueData, function (i, d) {
                  select.append("<option value='" + d + "'>" + d + "</option>");
                });
              } else {
                $("input", column.footer()).on("input", function () {
                  var val = $(this).val();
                  console.log("Column", column.index(), "input event. Value:", val);
                  if (val === "") {
                    column.search('').draw();
                    console.log("Column", column.index(), "search cleared.");
                  } else {
                    column.search(val).draw();
                  }
                });
              }
            });
          }
        });

        // Global search: use the built-in DataTables global search.
        $("#transactionsTable_filter input").off("input").on("input", function () {
          var val = $(this).val();
          console.log("Global search input event. Value:", val);
          if (val === "") {
            table.search('').draw();
            console.log("Global search cleared.");
          } else {
            table.search(val).draw();
          }
        });

        return table;
      }

      // Initialize the DataTable.
      var table = initializeDataTable(false);

      // Debug: Log events on footer inputs.
      $("#transactionsTable tfoot input").on("input", function () {
        console.log("DEBUG: Footer input event. Current value:", $(this).val());
      });

      // Reset Filters button: Clear both global and column filters.
      $("#resetFilters").on("click", function () {
        console.log("Reset Filters button clicked. Clearing all filters.");
        table.search('').columns().search('').draw();
        $("#transactionsTable_filter input").val('');
        $("#transactionsTable tfoot input").val('');
        $("#transactionsTable tfoot select").val('');
      });

      // Toggle Full View button: Toggle view mode and reinitialize the DataTable.
      $("#toggleFullView").on("click", function () {
        $("body").toggleClass("full-view");
        var isFullView = $("body").hasClass("full-view");
        console.log("Toggle Full View button clicked. isFullView:", isFullView);
        table = initializeDataTable(isFullView);
      });

      console.log("DataTable active:", $.fn.DataTable.isDataTable("#transactionsTable"));

      // ************************************************************
      // Apply text shortening to designated cells.
      // You can adjust the selectors and max lengths as needed.
      // ************************************************************
      applyTextShortening(".description", 36);
      applyTextShortening(".id", 8, true);
      applyTextShortening(".source", 20, true);
      
      initializeDataTable(false)
    });
  </script>
</body>
</html>
